{"version":3,"sources":["views/home/CurrentWeather.tsx","views/home/WeatherItem.tsx","app-settings.ts","views/home/ForecastHelper.ts","views/home/Home.tsx","ApiDataService.ts","Context.ts","AppDataStore.ts","views/AppAlertDialog.tsx","App.tsx","index.tsx"],"names":["CurrentWeather","sunriseDate","Date","setUTCSeconds","this","props","current","sys","sunrise","sunsetDate","sunset","dataAsOn","dt","className","src","weather","icon","alt","main","temp","feels_like","temp_min","temp_max","pressure","humidity","wind","speed","deg","getHours","getMinutes","coord","lat","lon","toDateString","toLocaleTimeString","React","Component","day","month","WeatherItem","date","item","getDay","getMonth","getDate","appSettings","appid","forecastPivotHour","api","currentWeatherDataByCityUrl","currentWeatherDataByCoordUrl","currentWeatherForecastDataByCoordUrl","ForecastHelper","currentWeather","forecast","forecastMap","Map","currentWeatherDate","list","forEach","index","itemDate","isSameDay","has","set","date1","date2","getFullYear","getUTCFullYear","Home","futureItems","getDistinctForecastItems","push","key","ApiDataService","appDataStore","location","currentForecastWeather","url","replace","toString","Error","fetch","response","ok","json","model","currentForecastWeather$","next","city","currentWeather$","currentLocation","Rx","unsubscribe","apiDataService","ApiDataContext","createContext","AppDataStoreContext","AppAlertDialog","useState","open","setOpen","useEffect","Dialog","aria-labelledby","aria-describedby","DialogTitle","id","title","DialogContent","DialogContentText","children","AppTitle","setCurrentWeather","useContext","subscription","subscribe","name","ReactDOM","render","Provider","value","appViewModel","setViewModel","openGeoLocationRejectionAlert","setOpenGeoLocationRejectionAlert","openGeoLocationNotSupportedAlert","setOpenGeoLocationNotSupportedAlert","currentForecast","navigator","geolocation","getCurrentPosition","position","newAppViewModel","coords","latitude","longitude","getCurrentWeatherData","then","getCurrentForecastWeatherData","appHeader","AppBar","Toolbar","IconButton","edge","color","aria-label","RadioGroup","row","FormControlLabel","control","Radio","label","labelPlacement","document","getElementById"],"mappings":"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","file":"static/js/main.b79a5132.chunk.js","sourcesContent":["import React from 'react';\r\nimport { CurrentWeatherModel } from '../api-model';\r\nimport './CurrentWeather.scss';\r\n\r\ninterface CurrentWeatherProp {\r\n    current: CurrentWeatherModel;\r\n}\r\n\r\n\r\nexport default class CurrentWeather extends React.Component<CurrentWeatherProp> {\r\n\r\n    render() {\r\n        const sunriseDate = new Date(1);\r\n        sunriseDate.setUTCSeconds(this.props.current.sys.sunrise);\r\n        const sunsetDate = new Date(1);\r\n        sunsetDate.setUTCSeconds(this.props.current.sys.sunset);\r\n        let dataAsOn = new Date(1);\r\n        dataAsOn.setUTCSeconds(this.props.current.dt);\r\n\r\n        return (\r\n            <div className=\"current-weather-cont\">\r\n                <img className=\"weather-ico\" src={`https://openweathermap.org/img/wn/${this.props.current.weather[0].icon}@2x.png`} alt=\"weather info\"></img>\r\n                <div className=\"temp-info\">\r\n                    <p className=\"temp bold\">\r\n                        {this.props.current.main.temp}&deg;C\r\n                        <span className=\"feels_like\">feels like {this.props.current.main.feels_like}&deg;C</span>\r\n                    </p>\r\n                    <p className=\"sep\">|</p>\r\n                    <p className=\"oth-det\">\r\n                        <span className=\"bold\">{this.props.current.weather[0].main}</span>\r\n                    </p>\r\n                    <p className=\"sep\">|</p>\r\n                    <p className=\"oth-det\"> {this.props.current.main.temp_min}/{this.props.current.main.temp_max}&deg;C</p>\r\n                </div>\r\n\r\n                <p className=\"misc-info misc-info--sep\">Pressure {this.props.current.main.pressure} hPa <span className=\"gap\"></span> Humidity {this.props.current.main.humidity}%</p>\r\n                <p className=\"misc-info\">Wind speed {this.props.current.wind.speed} mtr/sec <span className=\"gap\"></span> Wind direction {this.props.current.wind.deg}&deg;(meteorological)</p>\r\n                <p className=\"misc-info\">Sunrise {sunriseDate.getHours() + ':' + sunriseDate.getMinutes()} <span className=\"gap\"></span> Sunset {sunsetDate.getHours() + ':' + sunsetDate.getMinutes()}</p>\r\n                <p className=\"loc misc-info\">\r\n                    <i className=\"material-icons\">place</i>\r\n                    <span>({this.props.current.coord.lat}, {this.props.current.coord.lon})</span>\r\n                </p>\r\n                <p className=\"misc-info misc-info--note\"><sup>**</sup>Data as on {dataAsOn.toDateString() + ' ' + dataAsOn.toLocaleTimeString()}</p>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}","import { ForecastItem } from \"../api-model\";\r\nimport React from \"react\";\r\n\r\nconst day = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\r\nconst month = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\r\n\r\ninterface WeatherItemProp {\r\n    item: ForecastItem;\r\n}\r\n\r\nexport function WeatherItem(props: WeatherItemProp) {\r\n\r\n    const date = new Date(1);\r\n    date.setUTCSeconds(props.item.dt);\r\n\r\n    return (\r\n        <div className=\"future-status__item\">\r\n            <label className=\"item\">{day[date.getDay()]}</label>\r\n            <label className=\"item\">{month[date.getMonth()]} {date.getDate()}</label>\r\n            <label className=\"item\">{date.getHours() + ':' + date.getMinutes()}</label>\r\n            <img className=\"item ico\"\r\n                src={`https://openweathermap.org/img/wn/${props.item.weather[0].icon}@2x.png`}\r\n                alt=\"weather info\"></img>\r\n            <label className=\"item\">{props.item.weather[0].main}</label>\r\n            <label className=\"item\">{(props.item.main.temp_min + props.item.main.temp_max) / 2}&deg;C</label>\r\n        </div>\r\n    );\r\n} ","interface Setting {\r\n    appid: string;\r\n    api: ApiConfiguration;\r\n    forecastPivotHour: number;\r\n}\r\n\r\ninterface ApiConfiguration {\r\n    currentWeatherDataByCityUrl: string;\r\n    currentWeatherDataByCoordUrl: string;\r\n    currentWeatherForecastDataByCoordUrl: string;\r\n}\r\n\r\nexport const appSettings: Setting = {\r\n    appid: 'adb9dd6b20cadd87d12b7df253187477',\r\n    forecastPivotHour: 8,\r\n    api: {\r\n        currentWeatherDataByCityUrl: 'https://api.openweathermap.org/data/2.5/weather?q={location}&appid={appid}&units=metric',\r\n        currentWeatherDataByCoordUrl: 'https://api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&appid={appid}&units=metric',\r\n        currentWeatherForecastDataByCoordUrl: 'https://api.openweathermap.org/data/2.5/forecast?lat={lat}&lon={lon}&appid=adb9dd6b20cadd87d12b7df253187477&units=metric'\r\n    }\r\n};","import { ForecastItem, ForecastModel, CurrentWeatherModel } from \"../api-model\";\r\nimport { appSettings } from \"../../app-settings\";\r\n\r\nexport class ForecastHelper {\r\n\r\n    static getDistinctForecastItems(currentWeather: CurrentWeatherModel, forecast: ForecastModel): Map<number, ForecastItem> {\r\n        const forecastMap: Map<number, ForecastItem>= new Map();\r\n        \r\n        const currentWeatherDate = new Date(1);\r\n        currentWeatherDate.setUTCSeconds(currentWeather.dt);\r\n\r\n        forecast.list.forEach((item, index) => {\r\n            const itemDate = new Date(1);\r\n            itemDate.setUTCSeconds(item.dt);\r\n\r\n            if(ForecastHelper.isSameDay(currentWeatherDate, itemDate)) return;\r\n            if(forecastMap.has(itemDate.getDate())) return;\r\n\r\n            if(itemDate.getHours() === appSettings.forecastPivotHour) {\r\n                forecastMap.set(itemDate.getDate(), item);\r\n            }\r\n\r\n        });\r\n\r\n        return forecastMap;\r\n    }\r\n\r\n    private static isSameDay(date1: Date, date2: Date): boolean {\r\n        return date1.getDate() === date2.getDate()\r\n            && date1.getMonth() === date2.getMonth()\r\n            && date1.getFullYear() === date2.getUTCFullYear();\r\n    }\r\n\r\n}","import React from 'react';\r\nimport './Home.scss';\r\nimport CurrentWeather from './CurrentWeather';\r\nimport { CurrentWeatherModel, ForecastModel } from '../api-model';\r\nimport { WeatherItem } from './WeatherItem';\r\nimport { ForecastHelper } from './ForecastHelper';\r\n\r\ninterface HomeProp {\r\n    currentWeather: CurrentWeatherModel;\r\n    forecast: ForecastModel;\r\n}\r\n\r\n\r\nexport default function Home(props: HomeProp) {\r\n\r\n    if (!props.currentWeather) {\r\n        return null;\r\n    }\r\n\r\n    const futureItems: React.ReactNode[] = [];\r\n    if (props.forecast) {\r\n        ForecastHelper.getDistinctForecastItems(props.currentWeather, props.forecast)\r\n            .forEach((item) => {\r\n                futureItems.push((<WeatherItem item={item} key={item.dt}></WeatherItem>));\r\n            });\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"home-container\">\r\n            <CurrentWeather current={props.currentWeather}></CurrentWeather>\r\n            <div className=\"future-status\">\r\n                {\r\n                    futureItems\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import { CurrentWeatherModel, ForecastModel } from \"./views/api-model\";\r\nimport { appSettings } from './app-settings';\r\nimport { WeatherLocation } from './app.model';\r\nimport { AppDataStore } from \"./AppDataStore\";\r\n\r\nexport class ApiDataService {\r\n    \r\n    constructor(private appDataStore: AppDataStore) {}\r\n\r\n    async getCurrentForecastWeatherData(location: WeatherLocation) {\r\n        if(this.appDataStore.currentForecastWeather) return this.appDataStore.currentForecastWeather;\r\n\r\n        let url = '';\r\n        if(location.lat && location.lon) {\r\n            url = appSettings.api.currentWeatherForecastDataByCoordUrl.replace('{lat}', location.lat.toString()).replace('{lon}', location.lon.toString());\r\n        }\r\n        else {\r\n            throw new Error('Location not defined');\r\n        }\r\n        url = url.replace('{appid}', appSettings.appid);\r\n        let response = await fetch(url);\r\n        if(response.ok) {\r\n            const model = (await response.json()) as ForecastModel;\r\n            this.appDataStore.currentForecastWeather = model;\r\n            this.appDataStore.currentForecastWeather$.next(model);\r\n            return model;\r\n        } else {\r\n            throw new Error('error while invoking current weather data');\r\n        }\r\n    }\r\n\r\n    async getCurrentWeatherData(location: WeatherLocation) {\r\n        if(this.appDataStore.currentWeather) return this.appDataStore.currentWeather;\r\n\r\n        let url = '';\r\n        if(location.city) {\r\n            url = appSettings.api.currentWeatherDataByCityUrl.replace('{location}', location.city)\r\n        }\r\n        else if(location.lat && location.lon) {\r\n            url = appSettings.api.currentWeatherDataByCoordUrl.replace('{lat}', location.lat.toString()).replace('{lon}', location.lon.toString());\r\n        }\r\n        else {\r\n            throw new Error('Location not defined');\r\n        }\r\n        url = url.replace('{appid}', appSettings.appid);\r\n        let response = await fetch(url);\r\n        if(response.ok) {\r\n            const model = (await response.json()) as CurrentWeatherModel;\r\n            this.appDataStore.currentWeather = model;\r\n            this.appDataStore.currentWeather$.next(model);\r\n            return model;\r\n        } else {\r\n            throw new Error('error while invoking current weather data');\r\n        }\r\n    }\r\n\r\n}","import { ApiDataService } from \"./ApiDataService\";\r\nimport React from \"react\";\r\nimport { AppDataStore } from \"./AppDataStore\";\r\n\r\nexport const appDataStore = new AppDataStore();\r\nexport const apiDataService = new ApiDataService(appDataStore);\r\nexport const ApiDataContext = React.createContext(apiDataService);\r\nexport const AppDataStoreContext = React.createContext(appDataStore);","import * as Rx from 'rxjs';\r\nimport { CurrentWeatherModel, ForecastModel } from './views/api-model';\r\nimport { WeatherLocation } from './app.model';\r\n\r\n// @todo manage the central storage more efficently\r\n// consider redux ?\r\nexport class AppDataStore {\r\n\r\n    currentWeather: CurrentWeatherModel = null as any;\r\n    currentForecastWeather: ForecastModel = null as any;\r\n    currentLocation: WeatherLocation = {};\r\n    currentWeather$: Rx.Subject<CurrentWeatherModel> = new Rx.Subject();\r\n    currentForecastWeather$: Rx.Subject<ForecastModel> = new Rx.Subject();\r\n\r\n    destroy() {\r\n        this.currentWeather$.unsubscribe();\r\n    }\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport { Dialog, DialogTitle, DialogContent, DialogContentText } from \"@material-ui/core\";\r\n\r\ninterface AppAlertDialogProp {\r\n    open: boolean;\r\n    title: string;\r\n    children: React.ReactNode;\r\n}\r\nexport function AppAlertDialog(props: AppAlertDialogProp) {\r\n\r\n    const [open, setOpen] = useState(props.open);\r\n\r\n    useEffect(() => {\r\n        setOpen(props.open);\r\n    }, [props.open]);\r\n\r\n\r\n    return (\r\n        <>\r\n            <Dialog\r\n                open={open}\r\n                aria-labelledby=\"alert-dialog-title\"\r\n                aria-describedby=\"alert-dialog-description\">\r\n                <DialogTitle id=\"alert-dialog-title\">{props.title}</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText id=\"alert-dialog-description\">\r\n                        {props.children}\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n            </Dialog>\r\n        </>\r\n    );\r\n\r\n}\r\n","import React, { useState, useContext, useEffect } from 'react';\r\nimport './App.scss';\r\nimport Home from './views/home/Home';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport { ApiDataContext, AppDataStoreContext } from './Context';\r\nimport { WeatherLocation } from './app.model';\r\nimport { CurrentWeatherModel, ForecastModel } from './views/api-model';\r\nimport { AppDataStore } from './AppDataStore';\r\nimport { ApiDataService } from './ApiDataService';\r\nimport { AppAlertDialog } from './views/AppAlertDialog';\r\n\r\ninterface AppViewModel {\r\n    currentLocation: WeatherLocation;\r\n    currentWeather: CurrentWeatherModel;\r\n    currentForecast: ForecastModel;\r\n}\r\nexport default function App() {\r\n\r\n    const [appViewModel, setViewModel] = useState();\r\n    let [openGeoLocationRejectionAlert, setOpenGeoLocationRejectionAlert] = useState(false);\r\n    let [openGeoLocationNotSupportedAlert, setOpenGeoLocationNotSupportedAlert] = useState(false);\r\n    const apiDataService: ApiDataService = useContext(ApiDataContext);\r\n    const currentWeather: CurrentWeatherModel = appViewModel ? appViewModel.currentWeather : null;\r\n    const currentForecastWeather: ForecastModel = appViewModel ? appViewModel.currentForecast : null;\r\n\r\n    useEffect(() => {\r\n        // make sure that you try to access geolocation and weather API only once when app loads\r\n        if (navigator.geolocation && !appViewModel && !openGeoLocationRejectionAlert && !openGeoLocationNotSupportedAlert) {\r\n            navigator.geolocation.getCurrentPosition(position => {\r\n                const newAppViewModel: AppViewModel = {} as any;\r\n                newAppViewModel.currentLocation = { lat: position.coords.latitude, lon: position.coords.longitude, city: '' };\r\n                apiDataService.getCurrentWeatherData(newAppViewModel.currentLocation).then(model => {\r\n                    newAppViewModel.currentWeather = model;\r\n                    apiDataService.getCurrentForecastWeatherData(newAppViewModel.currentLocation).then(forecast => {\r\n                        newAppViewModel.currentForecast = forecast;\r\n                        setViewModel(newAppViewModel);\r\n                    });\r\n                });\r\n            }, () => {\r\n                setOpenGeoLocationRejectionAlert(true);\r\n            });\r\n        } else if (!navigator.geolocation) {\r\n            setOpenGeoLocationNotSupportedAlert(true);\r\n        }\r\n    }, [appViewModel, openGeoLocationRejectionAlert, openGeoLocationNotSupportedAlert, apiDataService]);\r\n\r\n\r\n\r\n    const appHeader: JSX.Element = (\r\n        <AppBar position=\"static\">\r\n            <Toolbar>\r\n                <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                    <i className=\"material-icons\">menu</i>\r\n                </IconButton>\r\n                <AppTitle></AppTitle>\r\n                <div>\r\n                    <RadioGroup aria-label=\"position\" name=\"position\" row value=\"m\">\r\n                        <FormControlLabel\r\n                            value=\"m\"\r\n                            control={<Radio />}\r\n                            label=\"Metric\"\r\n                            labelPlacement=\"start\"\r\n                        />\r\n                    </RadioGroup>\r\n                </div>\r\n            </Toolbar>\r\n        </AppBar>\r\n    );\r\n\r\n    return (\r\n        <div className=\"root-container\">\r\n            {appHeader}\r\n            <div>\r\n                <Home currentWeather={currentWeather} forecast={currentForecastWeather}></Home>\r\n            </div>\r\n            <AppAlertDialog open={openGeoLocationRejectionAlert}\r\n                title=\"Allow location access\">\r\n                <span>App needs access to your current location to get your geo coordinates, However it seems like you have dsabled or denied it</span>\r\n            </AppAlertDialog>\r\n            <AppAlertDialog open={openGeoLocationNotSupportedAlert}\r\n                title=\"Geolocation not supported\">\r\n                <span>It seems like you are using a crapy old device or you might have disabled geolocation</span>\r\n            </AppAlertDialog>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nfunction AppTitle() {\r\n    const [currentWeather, setCurrentWeather] = useState();\r\n    const appDataStore: AppDataStore = useContext(AppDataStoreContext);\r\n    \r\n    useEffect(() => {\r\n        const subscription = appDataStore.currentWeather$.subscribe((model) => {\r\n            setCurrentWeather(model);\r\n        });\r\n        return () => {\r\n            subscription.unsubscribe();\r\n        };\r\n    });\r\n\r\n    return (\r\n        <div className=\"app-title\">\r\n            <h1>{currentWeather ? (currentWeather as CurrentWeatherModel).name : ''}</h1>\r\n        </div>\r\n    );\r\n}\r\n\r\n","import ReactDOM from 'react-dom';\r\nimport React from 'react';\r\nimport App from './App';\r\nimport './sass/main.scss';\r\nimport { ApiDataContext, AppDataStoreContext, apiDataService, appDataStore } from './Context';\r\n\r\nReactDOM.render(\r\n    (\r\n        <ApiDataContext.Provider value={apiDataService}>\r\n            <AppDataStoreContext.Provider value={appDataStore}>\r\n                <App />\r\n            </AppDataStoreContext.Provider>\r\n        </ApiDataContext.Provider>\r\n    ),\r\n    document.getElementById('app-root'));"],"sourceRoot":""}