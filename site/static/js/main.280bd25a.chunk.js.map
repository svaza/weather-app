{"version":3,"sources":["app-settings.ts","views/ForecastHelper.ts","views/home/CurrentWeather.tsx","views/home/WeatherItem.tsx","views/home/Home.tsx","ApiDataService.ts","Context.ts","AppDataStore.ts","views/AppAlertDialog.tsx","views/day/WeatherDay.tsx","App.tsx","index.tsx"],"names":["appSettings","appid","forecastPivotHour","api","currentWeatherDataByCityUrl","currentWeatherDataByCoordUrl","currentWeatherForecastDataByCoordUrl","ForecastHelper","currentWeather","forecast","forecastMap","Map","currentWeatherDate","Date","setUTCSeconds","dt","list","forEach","item","index","itemDate","isSameDay","has","getDate","getHours","set","forecastItems","filteredItems","pivotDate","push","targetWeather","clouds","coord","main","name","sys","country","weather","wind","JSON","parse","stringify","date1","date2","getMonth","getFullYear","getUTCFullYear","CurrentWeather","sunriseDate","this","props","current","sunrise","sunsetDate","sunset","dataAsOn","isToday","className","Chip","variant","color","label","toDateString","toLocaleTimeString","src","icon","alt","temp","feels_like","temp_min","temp_max","pressure","humidity","speed","deg","getMinutes","lat","lon","React","Component","day","month","WeatherItem","date","history","useHistory","onClick","getDay","parseFloat","toFixed","Home","futureItems","getDistinctForecastItems","key","ApiDataService","appDataStore","location","currentForecastWeather","url","replace","toString","Error","fetch","response","ok","json","model","currentForecastWeather$","next","city","currentWeather$","currentLocation","Rx","unsubscribe","apiDataService","ApiDataContext","createContext","AppDataStoreContext","AppAlertDialog","useState","open","setOpen","useEffect","Dialog","aria-labelledby","aria-describedby","DialogTitle","id","title","DialogContent","DialogContentText","children","WeatherDay","useParams","useContext","currentItem","filterForecastItems","Number","find","e","currentWeatherModel","forecastItemToCurrentWeatherModel","withRouter","appViewModel","setViewModel","openGeoLocationRejectionAlert","setOpenGeoLocationRejectionAlert","openGeoLocationNotSupportedAlert","setOpenGeoLocationNotSupportedAlert","currentForecast","navigator","geolocation","getCurrentPosition","position","newAppViewModel","coords","latitude","longitude","getCurrentWeatherData","then","getCurrentForecastWeatherData","HeaderWithRouter","path","Footer","useLocation","setTempFlag","unlisten","listen","AppBar","Toolbar","IconButton","edge","aria-label","pathname","goBack","AppTitle","RadioGroup","row","value","FormControlLabel","control","Radio","labelPlacement","setCurrentWeather","subscription","subscribe","href","rel","target","ReactDOM","render","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.280bd25a.chunk.js","sourcesContent":["interface Setting {\r\n    appid: string;\r\n    api: ApiConfiguration;\r\n    forecastPivotHour: number;\r\n}\r\n\r\ninterface ApiConfiguration {\r\n    currentWeatherDataByCityUrl: string;\r\n    currentWeatherDataByCoordUrl: string;\r\n    currentWeatherForecastDataByCoordUrl: string;\r\n}\r\n\r\nexport const appSettings: Setting = {\r\n    appid: 'adb9dd6b20cadd87d12b7df253187477',\r\n    forecastPivotHour: 8,\r\n    api: {\r\n        currentWeatherDataByCityUrl: 'https://api.openweathermap.org/data/2.5/weather?q={location}&appid={appid}&units=metric',\r\n        currentWeatherDataByCoordUrl: 'https://api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&appid={appid}&units=metric',\r\n        currentWeatherForecastDataByCoordUrl: 'https://api.openweathermap.org/data/2.5/forecast?lat={lat}&lon={lon}&appid=adb9dd6b20cadd87d12b7df253187477&units=metric'\r\n    }\r\n};","import { ForecastItem, ForecastModel, CurrentWeatherModel } from \"./api-model\";\r\nimport { appSettings } from \"../app-settings\";\r\n\r\nexport class ForecastHelper {\r\n\r\n    static getDistinctForecastItems(currentWeather: CurrentWeatherModel, forecast: ForecastModel): Map<number, ForecastItem> {\r\n        const forecastMap: Map<number, ForecastItem>= new Map();\r\n        \r\n        const currentWeatherDate = new Date(1);\r\n        currentWeatherDate.setUTCSeconds(currentWeather.dt);\r\n\r\n        forecast.list.forEach((item, index) => {\r\n            const itemDate = new Date(1);\r\n            itemDate.setUTCSeconds(item.dt);\r\n\r\n            if(ForecastHelper.isSameDay(currentWeatherDate, itemDate)) return;\r\n            if(forecastMap.has(itemDate.getDate())) return;\r\n\r\n            if(itemDate.getHours() === appSettings.forecastPivotHour) {\r\n                forecastMap.set(itemDate.getDate(), item);\r\n            }\r\n\r\n        });\r\n\r\n        return forecastMap;\r\n    }\r\n\r\n    static filterForecastItems(dt: number, forecastItems: ForecastItem[]): ForecastItem[] {\r\n        const filteredItems: ForecastItem[] = [];\r\n\r\n        const pivotDate = new Date(1);\r\n        pivotDate.setUTCSeconds(dt);\r\n\r\n        forecastItems.forEach(item => {\r\n            const itemDate = new Date(1);\r\n            itemDate.setUTCSeconds(item.dt);\r\n            \r\n            if(ForecastHelper.isSameDay(pivotDate, itemDate)) {\r\n                filteredItems.push(item);\r\n            }\r\n        });\r\n\r\n        return filteredItems;\r\n    }\r\n\r\n    static forecastItemToCurrentWeatherModel(item: ForecastItem, currentWeather: CurrentWeatherModel): CurrentWeatherModel {\r\n        const targetWeather: CurrentWeatherModel = {} as any;\r\n\r\n        targetWeather.clouds = item.clouds;\r\n        targetWeather.coord = currentWeather.coord;\r\n        targetWeather.dt = item.dt;\r\n        targetWeather.main = item.main;\r\n        targetWeather.name = currentWeather.name;\r\n        targetWeather.sys = { country: currentWeather.sys.country } as any;\r\n        targetWeather.weather = item.weather;\r\n        targetWeather.wind = item.wind;\r\n\r\n        // make a copy - just a precaution\r\n        return JSON.parse(JSON.stringify(targetWeather));\r\n    } \r\n\r\n    static isSameDay(date1: Date, date2: Date): boolean {\r\n        return date1.getDate() === date2.getDate()\r\n            && date1.getMonth() === date2.getMonth()\r\n            && date1.getFullYear() === date2.getUTCFullYear();\r\n    }\r\n\r\n}","import React from 'react';\r\nimport { CurrentWeatherModel } from '../api-model';\r\nimport './CurrentWeather.scss';\r\nimport { Chip } from '@material-ui/core';\r\nimport { ForecastHelper } from '../ForecastHelper';\r\n\r\ninterface CurrentWeatherProp {\r\n    current: CurrentWeatherModel;\r\n}\r\n\r\n\r\nexport default class CurrentWeather extends React.Component<CurrentWeatherProp> {\r\n\r\n    render() {\r\n        let sunriseDate: Date = null as any;\r\n        if (this.props.current.sys.sunrise) {\r\n            sunriseDate = new Date(1);\r\n            sunriseDate.setUTCSeconds(this.props.current.sys.sunrise);\r\n        }\r\n\r\n        let sunsetDate: Date = null as any;\r\n        if (this.props.current.sys.sunset) {\r\n            sunsetDate = new Date(1);\r\n            sunsetDate.setUTCSeconds(this.props.current.sys.sunset);\r\n        }\r\n\r\n        let dataAsOn = new Date(1);\r\n        dataAsOn.setUTCSeconds(this.props.current.dt);\r\n\r\n        const isToday = ForecastHelper.isSameDay(dataAsOn, new Date());\r\n\r\n        return (\r\n            <div className=\"current-weather-cont\">\r\n\r\n                <div className=\"title\">\r\n                    <Chip\r\n                        variant=\"outlined\"\r\n                        color=\"primary\"\r\n                        label={(isToday ? 'Today ' : '') + dataAsOn.toDateString() + ' ' + dataAsOn.toLocaleTimeString()} />\r\n                </div>\r\n\r\n                <img className=\"weather-ico\" src={`https://openweathermap.org/img/wn/${this.props.current.weather[0].icon}@2x.png`} alt=\"weather info\"></img>\r\n                <div className=\"temp-info\">\r\n                    <p className=\"temp bold\">\r\n                        {this.props.current.main.temp}&deg;C\r\n                        <span className=\"feels_like\">feels like {this.props.current.main.feels_like}&deg;C</span>\r\n                    </p>\r\n                    <p className=\"sep\">|</p>\r\n                    <p className=\"oth-det\">\r\n                        <span className=\"bold\">{this.props.current.weather[0].main}</span>\r\n                    </p>\r\n                    <p className=\"sep\">|</p>\r\n                    <p className=\"oth-det\"> {this.props.current.main.temp_min}/{this.props.current.main.temp_max}&deg;C</p>\r\n                </div>\r\n\r\n                <p className=\"misc-info misc-info--sep\">Pressure {this.props.current.main.pressure} hPa <span className=\"gap\"></span> Humidity {this.props.current.main.humidity}%</p>\r\n                <p className=\"misc-info\">Wind speed {this.props.current.wind.speed} mtr/sec <span className=\"gap\"></span> Wind direction {this.props.current.wind.deg}&deg;(meteorological)</p>\r\n\r\n                {sunriseDate && sunsetDate ? (\r\n                    <p className=\"misc-info\">Sunrise {sunriseDate.getHours() + ':' + sunriseDate.getMinutes()} <span className=\"gap\"></span> Sunset {sunsetDate.getHours() + ':' + sunsetDate.getMinutes()}</p>\r\n                ) : ''}\r\n\r\n                <p className=\"loc misc-info\">\r\n                    <i className=\"material-icons\">place</i>\r\n                    <span>({this.props.current.coord.lat}, {this.props.current.coord.lon})</span>\r\n                </p>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}","import { ForecastItem } from \"../api-model\";\r\nimport React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst day = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\r\nconst month = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\r\n\r\ninterface WeatherItemProp {\r\n    item: ForecastItem;\r\n}\r\n\r\nexport function WeatherItem(props: WeatherItemProp) {\r\n\r\n    const date = new Date(1);\r\n    date.setUTCSeconds(props.item.dt);\r\n    const history = useHistory();\r\n    function navigate() {\r\n        history.push(`/day/${props.item.dt}`);\r\n    }\r\n\r\n    return (\r\n        <div className=\"future-status__item\" onClick={navigate}>\r\n            <label className=\"item\">{day[date.getDay()]}</label>\r\n            <label className=\"item\">{month[date.getMonth()]} {date.getDate()}</label>\r\n            <label className=\"item\">{date.getHours() + ':' + date.getMinutes()}</label>\r\n            <img className=\"item ico\"\r\n                src={`https://openweathermap.org/img/wn/${props.item.weather[0].icon}@2x.png`}\r\n                alt=\"weather info\"></img>\r\n            <label className=\"item\">{props.item.weather[0].main}</label>\r\n            <label className=\"item\">{parseFloat((props.item.main.temp_min + props.item.main.temp_max) / 2 as any).toFixed(2)}&deg;C</label>\r\n        </div>\r\n    );\r\n} ","import React from 'react';\r\nimport './Home.scss';\r\nimport CurrentWeather from './CurrentWeather';\r\nimport { CurrentWeatherModel, ForecastModel } from '../api-model';\r\nimport { WeatherItem } from './WeatherItem';\r\nimport { ForecastHelper } from '../ForecastHelper';\r\n\r\ninterface HomeProp {\r\n    currentWeather: CurrentWeatherModel;\r\n    forecast: ForecastModel;\r\n}\r\n\r\n\r\nexport default function Home(props: HomeProp) {\r\n\r\n    if (!props.currentWeather) {\r\n        return null;\r\n    }\r\n\r\n    const futureItems: React.ReactNode[] = [];\r\n    if (props.forecast) {\r\n        ForecastHelper.getDistinctForecastItems(props.currentWeather, props.forecast)\r\n            .forEach((item) => {\r\n                futureItems.push((<WeatherItem item={item} key={item.dt}></WeatherItem>));\r\n            });\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"home-container\">\r\n            <CurrentWeather current={props.currentWeather}></CurrentWeather>\r\n            <div className=\"future-status\">\r\n                {\r\n                    futureItems\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import { CurrentWeatherModel, ForecastModel } from \"./views/api-model\";\r\nimport { appSettings } from './app-settings';\r\nimport { WeatherLocation } from './app.model';\r\nimport { AppDataStore } from \"./AppDataStore\";\r\n\r\nexport class ApiDataService {\r\n    \r\n    constructor(private appDataStore: AppDataStore) {}\r\n\r\n    async getCurrentForecastWeatherData(location: WeatherLocation) {\r\n        if(this.appDataStore.currentForecastWeather) return this.appDataStore.currentForecastWeather;\r\n\r\n        let url = '';\r\n        if(location.lat && location.lon) {\r\n            url = appSettings.api.currentWeatherForecastDataByCoordUrl.replace('{lat}', location.lat.toString()).replace('{lon}', location.lon.toString());\r\n        }\r\n        else {\r\n            throw new Error('Location not defined');\r\n        }\r\n        url = url.replace('{appid}', appSettings.appid);\r\n        let response = await fetch(url);\r\n        if(response.ok) {\r\n            const model = (await response.json()) as ForecastModel;\r\n            this.appDataStore.currentForecastWeather = model;\r\n            this.appDataStore.currentForecastWeather$.next(model);\r\n            return model;\r\n        } else {\r\n            throw new Error('error while invoking current weather data');\r\n        }\r\n    }\r\n\r\n    async getCurrentWeatherData(location: WeatherLocation) {\r\n        if(this.appDataStore.currentWeather) return this.appDataStore.currentWeather;\r\n\r\n        let url = '';\r\n        if(location.city) {\r\n            url = appSettings.api.currentWeatherDataByCityUrl.replace('{location}', location.city)\r\n        }\r\n        else if(location.lat && location.lon) {\r\n            url = appSettings.api.currentWeatherDataByCoordUrl.replace('{lat}', location.lat.toString()).replace('{lon}', location.lon.toString());\r\n        }\r\n        else {\r\n            throw new Error('Location not defined');\r\n        }\r\n        url = url.replace('{appid}', appSettings.appid);\r\n        let response = await fetch(url);\r\n        if(response.ok) {\r\n            const model = (await response.json()) as CurrentWeatherModel;\r\n            this.appDataStore.currentWeather = model;\r\n            this.appDataStore.currentWeather$.next(model);\r\n            return model;\r\n        } else {\r\n            throw new Error('error while invoking current weather data');\r\n        }\r\n    }\r\n\r\n}","import { ApiDataService } from \"./ApiDataService\";\r\nimport React from \"react\";\r\nimport { AppDataStore } from \"./AppDataStore\";\r\n\r\nexport const appDataStore = new AppDataStore();\r\nexport const apiDataService = new ApiDataService(appDataStore);\r\nexport const ApiDataContext = React.createContext(apiDataService);\r\nexport const AppDataStoreContext = React.createContext(appDataStore);","import * as Rx from 'rxjs';\r\nimport { CurrentWeatherModel, ForecastModel } from './views/api-model';\r\nimport { WeatherLocation } from './app.model';\r\n\r\n// @todo manage the central storage more efficently\r\n// consider redux ?\r\nexport class AppDataStore {\r\n\r\n    currentWeather: CurrentWeatherModel = null as any;\r\n    currentForecastWeather: ForecastModel = null as any;\r\n    currentLocation: WeatherLocation = {};\r\n    currentWeather$: Rx.Subject<CurrentWeatherModel> = new Rx.Subject();\r\n    currentForecastWeather$: Rx.Subject<ForecastModel> = new Rx.Subject();\r\n\r\n    destroy() {\r\n        this.currentWeather$.unsubscribe();\r\n    }\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport { Dialog, DialogTitle, DialogContent, DialogContentText } from \"@material-ui/core\";\r\n\r\ninterface AppAlertDialogProp {\r\n    open: boolean;\r\n    title: string;\r\n    children: React.ReactNode;\r\n}\r\nexport function AppAlertDialog(props: AppAlertDialogProp) {\r\n\r\n    const [open, setOpen] = useState(props.open);\r\n\r\n    useEffect(() => {\r\n        setOpen(props.open);\r\n    }, [props.open]);\r\n\r\n\r\n    return (\r\n        <>\r\n            <Dialog\r\n                open={open}\r\n                aria-labelledby=\"alert-dialog-title\"\r\n                aria-describedby=\"alert-dialog-description\">\r\n                <DialogTitle id=\"alert-dialog-title\">{props.title}</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText id=\"alert-dialog-description\">\r\n                        {props.children}\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n            </Dialog>\r\n        </>\r\n    );\r\n\r\n}\r\n","import React, { useContext } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { AppDataStore } from \"../../AppDataStore\";\r\nimport { AppDataStoreContext } from \"../../Context\";\r\nimport { ForecastHelper } from \"../ForecastHelper\";\r\nimport CurrentWeather from \"../home/CurrentWeather\";\r\nimport { ForecastItem } from \"../api-model\";\r\nimport './WeatherDay.scss';\r\n\r\nexport function WeatherDay() {\r\n\r\n    const { dt } = useParams();\r\n    const appDataStore: AppDataStore = useContext(AppDataStoreContext);\r\n    const filteredForecastItems = ForecastHelper.filterForecastItems(Number(dt), appDataStore.currentForecastWeather.list);\r\n    const currentItem = filteredForecastItems.find(e => e.dt === Number(dt));\r\n    const currentWeatherModel = ForecastHelper.forecastItemToCurrentWeatherModel(currentItem as ForecastItem, appDataStore.currentWeather);\r\n\r\n    return (\r\n        <div className=\"weatherday-container\">\r\n            <CurrentWeather current={currentWeatherModel}></CurrentWeather>\r\n        </div>\r\n    );\r\n}","import React, { useState, useContext, useEffect } from 'react';\r\nimport './App.scss';\r\nimport Home from './views/home/Home';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport { ApiDataContext, AppDataStoreContext } from './Context';\r\nimport { WeatherLocation } from './app.model';\r\nimport { CurrentWeatherModel, ForecastModel } from './views/api-model';\r\nimport { AppDataStore } from './AppDataStore';\r\nimport { ApiDataService } from './ApiDataService';\r\nimport { AppAlertDialog } from './views/AppAlertDialog';\r\nimport { Switch, Route, withRouter, RouteComponentProps, useLocation, useHistory } from 'react-router-dom';\r\nimport { WeatherDay } from './views/day/WeatherDay';\r\n\r\ninterface AppViewModel {\r\n    currentLocation: WeatherLocation;\r\n    currentWeather: CurrentWeatherModel;\r\n    currentForecast: ForecastModel;\r\n}\r\nexport default withRouter(App);\r\nexport function App() {\r\n\r\n    const [appViewModel, setViewModel] = useState();\r\n    let [openGeoLocationRejectionAlert, setOpenGeoLocationRejectionAlert] = useState(false);\r\n    let [openGeoLocationNotSupportedAlert, setOpenGeoLocationNotSupportedAlert] = useState(false);\r\n    const apiDataService: ApiDataService = useContext(ApiDataContext);\r\n    const currentWeather: CurrentWeatherModel = appViewModel ? appViewModel.currentWeather : null;\r\n    const currentForecastWeather: ForecastModel = appViewModel ? appViewModel.currentForecast : null;\r\n\r\n    useEffect(() => {\r\n        // make sure that you try to access geolocation and weather API only once when app loads\r\n        if (navigator.geolocation && !appViewModel && !openGeoLocationRejectionAlert && !openGeoLocationNotSupportedAlert) {\r\n            navigator.geolocation.getCurrentPosition(position => {\r\n                const newAppViewModel: AppViewModel = {} as any;\r\n                newAppViewModel.currentLocation = { lat: position.coords.latitude, lon: position.coords.longitude, city: '' };\r\n                apiDataService.getCurrentWeatherData(newAppViewModel.currentLocation).then(model => {\r\n                    newAppViewModel.currentWeather = model;\r\n                    apiDataService.getCurrentForecastWeatherData(newAppViewModel.currentLocation).then(forecast => {\r\n                        newAppViewModel.currentForecast = forecast;\r\n                        setViewModel(newAppViewModel);\r\n                    });\r\n                });\r\n            }, () => {\r\n                setOpenGeoLocationRejectionAlert(true);\r\n            });\r\n        } else if (!navigator.geolocation) {\r\n            setOpenGeoLocationNotSupportedAlert(true);\r\n        }\r\n    }, [appViewModel, openGeoLocationRejectionAlert, openGeoLocationNotSupportedAlert, apiDataService]);\r\n\r\n    return (\r\n        <div className=\"root-container top-level-containers\">\r\n            <HeaderWithRouter />\r\n            <div className=\"content\">\r\n                <Switch>\r\n                    <Route path=\"/day/:dt\">\r\n                        <WeatherDay></WeatherDay>\r\n                    </Route>\r\n                    <Route path=\"/\">\r\n                        <Home currentWeather={currentWeather} forecast={currentForecastWeather}></Home>\r\n                    </Route>\r\n                </Switch>\r\n            </div>\r\n            <div className=\"footer\">\r\n                <Footer />\r\n            </div>\r\n            <AppAlertDialog open={openGeoLocationRejectionAlert}\r\n                title=\"Allow location access\">\r\n                <span>App needs access to your current location to get your geo coordinates, However it seems like you have dsabled or denied it</span>\r\n            </AppAlertDialog>\r\n            <AppAlertDialog open={openGeoLocationNotSupportedAlert}\r\n                title=\"Geolocation not supported\">\r\n                <span>It seems like you are using a crapy old device or you might have disabled geolocation</span>\r\n            </AppAlertDialog>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst HeaderWithRouter = withRouter(AppHeader);\r\nfunction AppHeader(props: RouteComponentProps) {\r\n    const location = useLocation();\r\n    const history = useHistory();\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    const [tempFlag, setTempFlag] = useState({});\r\n    useEffect(() => {\r\n        const unlisten = props.history.listen((location) => {\r\n            setTempFlag({});\r\n        });\r\n\r\n        return () => {\r\n            unlisten();\r\n        };\r\n    });\r\n    function onButtonClick() {\r\n        if(location.pathname === '/') {\r\n            // handle menu\r\n        } else {\r\n            history.goBack();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <AppBar position=\"static\">\r\n            <Toolbar>\r\n                <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\" onClick={onButtonClick}>\r\n                    <i className=\"material-icons\">{location.pathname === '/' ? 'menu' : 'arrow_back'}</i>\r\n                </IconButton>\r\n                <AppTitle></AppTitle>\r\n                <div>\r\n                    <RadioGroup aria-label=\"position\" name=\"position\" row value=\"m\">\r\n                        <FormControlLabel\r\n                            value=\"m\"\r\n                            control={<Radio />}\r\n                            label=\"Metric\"\r\n                            labelPlacement=\"start\"\r\n                        />\r\n                    </RadioGroup>\r\n                </div>\r\n            </Toolbar>\r\n        </AppBar>\r\n    );\r\n}\r\n\r\nfunction AppTitle() {\r\n    const [currentWeather, setCurrentWeather] = useState();\r\n    const appDataStore: AppDataStore = useContext(AppDataStoreContext);\r\n\r\n    useEffect(() => {\r\n        const subscription = appDataStore.currentWeather$.subscribe((model) => {\r\n            setCurrentWeather(model);\r\n        });\r\n        return () => {\r\n            subscription.unsubscribe();\r\n        };\r\n    });\r\n\r\n    return (\r\n        <div className=\"app-title\">\r\n            <h1>{currentWeather ? (currentWeather as CurrentWeatherModel).name : ''}</h1>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction Footer() {\r\n    return (\r\n        <p>&lt;/&gt; with &hearts; by <a href=\"https://twitter.com/iamsvaza\" rel=\"noopener noreferrer\" target=\"_blank\">svaza</a></p>\r\n    );\r\n}","import ReactDOM from 'react-dom';\r\nimport React from 'react';\r\nimport App from './App';\r\nimport './sass/main.scss';\r\nimport { ApiDataContext, AppDataStoreContext, apiDataService, appDataStore } from './Context';\r\nimport { HashRouter } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n    (\r\n        <ApiDataContext.Provider value={apiDataService}>\r\n            <AppDataStoreContext.Provider value={appDataStore}>\r\n                <HashRouter>\r\n                    <App />\r\n                </HashRouter>\r\n            </AppDataStoreContext.Provider>\r\n        </ApiDataContext.Provider>\r\n    ),\r\n    document.getElementById('app-root'));"],"sourceRoot":""}