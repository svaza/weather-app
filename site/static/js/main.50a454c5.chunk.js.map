{"version":3,"sources":["views/home/CurrentWeather.tsx","views/home/WeatherItem.tsx","views/home/Home.tsx","app-settings.ts","ApiDataService.ts","Context.ts","AppDataStore.ts","App.tsx","index.tsx"],"names":["CurrentWeather","sunriseDate","Date","setUTCSeconds","this","props","current","sys","sunrise","sunsetDate","sunset","className","src","weather","icon","alt","main","temp","feels_like","temp_min","temp_max","pressure","humidity","wind","speed","deg","getHours","getMinutes","coord","lat","lon","React","Component","day","month","WeatherItem","date","item","dt","getDay","getMonth","getDate","Home","currentWeather","forecast","list","map","forecastItem","appSettings","appid","api","currentWeatherDataByCityUrl","currentWeatherDataByCoordUrl","currentWeatherForecastDataByCoordUrl","ApiDataService","appDataStore","location","currentForecastWeather","url","replace","toString","Error","fetch","response","ok","json","model","currentForecastWeather$","next","city","currentWeather$","currentLocation","Rx","unsubscribe","apiDataService","ApiDataContext","createContext","AppDataStoreContext","AppTitle","useState","setCurrentWeather","useContext","dataAsOn","useEffect","subscription","subscribe","name","ReactDOM","render","Provider","value","appViewModel","setViewModel","currentForecast","navigator","geolocation","getCurrentPosition","position","newAppViewModel","coords","latitude","longitude","getCurrentWeatherData","then","getCurrentForecastWeatherData","appHeader","AppBar","Toolbar","IconButton","edge","color","aria-label","RadioGroup","row","FormControlLabel","control","Radio","label","labelPlacement","document","getElementById"],"mappings":"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","file":"static/js/main.50a454c5.chunk.js","sourcesContent":["import React from 'react';\r\nimport { CurrentWeatherModel } from '../api-model';\r\nimport './CurrentWeather.scss';\r\n\r\ninterface CurrentWeatherProp {\r\n    current: CurrentWeatherModel;\r\n}\r\n\r\n\r\nexport default class CurrentWeather extends React.Component<CurrentWeatherProp> {\r\n\r\n    render() {\r\n        const sunriseDate = new Date(1);\r\n        sunriseDate.setUTCSeconds(this.props.current.sys.sunrise);\r\n        const sunsetDate = new Date(1);\r\n        sunsetDate.setUTCSeconds(this.props.current.sys.sunset);\r\n\r\n        return (\r\n            <div className=\"current-weather-cont\">\r\n                <img className=\"weather-ico\" src={`https://openweathermap.org/img/wn/${this.props.current.weather[0].icon}@2x.png`} alt=\"weather info\"></img>\r\n                <div className=\"temp-info\">\r\n                    <p className=\"temp bold\">\r\n                        {this.props.current.main.temp}&deg;C\r\n                        <span className=\"feels_like\">feels like {this.props.current.main.feels_like}&deg;C</span>\r\n                    </p>\r\n                    <p className=\"sep\">|</p>\r\n                    <p className=\"oth-det\">\r\n                        <span className=\"bold\">{this.props.current.weather[0].main}</span>\r\n                    </p>\r\n                    <p className=\"sep\">|</p>\r\n                    <p className=\"oth-det\"> {this.props.current.main.temp_min}/{this.props.current.main.temp_max}&deg;C</p>\r\n                </div>\r\n\r\n                <p className=\"misc-info misc-info--sep\">Pressure {this.props.current.main.pressure} hPa <span className=\"gap\"></span> Humidity {this.props.current.main.humidity}%</p>\r\n                <p className=\"misc-info\">Wind speed {this.props.current.wind.speed} mtr/sec <span className=\"gap\"></span> Wind direction {this.props.current.wind.deg}&deg;(meteorological)</p>\r\n                <p className=\"misc-info\">Sunrise {sunriseDate.getHours() + ':' + sunriseDate.getMinutes()}AM <span className=\"gap\"></span> Sunset {sunsetDate.getHours() + ':' + sunsetDate.getMinutes()}PM</p>\r\n                <p className=\"loc misc-info\">\r\n                    <i className=\"material-icons\">place</i>\r\n                    <span>({this.props.current.coord.lat}, {this.props.current.coord.lon})</span>\r\n                </p>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}","import { ForecastItem } from \"../api-model\";\r\nimport React from \"react\";\r\n\r\nconst day = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\r\nconst month = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\r\n\r\ninterface WeatherItemProp {\r\n    item: ForecastItem;\r\n}\r\n\r\nexport function WeatherItem(props: WeatherItemProp) {\r\n\r\n    const date = new Date(1);\r\n    date.setUTCSeconds(props.item.dt);\r\n\r\n    return (\r\n        <div className=\"future-status__item\">\r\n            <label className=\"item\">{day[date.getDay()]}</label>\r\n            <label className=\"item\">{month[date.getMonth()]} {date.getDate()}</label>\r\n            <label className=\"item\">{date.getHours() + ':' + date.getMinutes()}</label>\r\n            <img className=\"item ico\"\r\n                src={`https://openweathermap.org/img/wn/${props.item.weather[0].icon}@2x.png`}\r\n                alt=\"weather info\"></img>\r\n            <label className=\"item\">{props.item.weather[0].main}</label>\r\n            <label className=\"item\">{props.item.main.temp_min}/{props.item.main.temp_max}&deg;C</label>\r\n        </div>\r\n    );\r\n} ","import React from 'react';\r\nimport './Home.scss';\r\nimport CurrentWeather from './CurrentWeather';\r\nimport { CurrentWeatherModel, ForecastModel } from '../api-model';\r\nimport { WeatherItem } from './WeatherItem';\r\n\r\ninterface HomeProp {\r\n    currentWeather: CurrentWeatherModel;\r\n    forecast: ForecastModel;\r\n}\r\n\r\n\r\nexport default function Home(props: HomeProp) {\r\n\r\n    if (!props.currentWeather) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <div className=\"home-container\">\r\n            <CurrentWeather current={props.currentWeather}></CurrentWeather>\r\n            <div className=\"future-status\">\r\n                {\r\n                    props.forecast.list.map(forecastItem => {\r\n                        return (<WeatherItem item={forecastItem}></WeatherItem>);\r\n                    })\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","interface Setting {\r\n    appid: string;\r\n    api: ApiConfiguration;\r\n}\r\n\r\ninterface ApiConfiguration {\r\n    currentWeatherDataByCityUrl: string;\r\n    currentWeatherDataByCoordUrl: string;\r\n    currentWeatherForecastDataByCoordUrl: string;\r\n}\r\n\r\nexport const appSettings: Setting = {\r\n    appid: 'adb9dd6b20cadd87d12b7df253187477',\r\n    api: {\r\n        currentWeatherDataByCityUrl: 'https://api.openweathermap.org/data/2.5/weather?q={location}&appid={appid}&units=metric',\r\n        currentWeatherDataByCoordUrl: 'https://api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&appid={appid}&units=metric',\r\n        currentWeatherForecastDataByCoordUrl: 'https://api.openweathermap.org/data/2.5/forecast?lat={lat}&lon={lon}&appid=adb9dd6b20cadd87d12b7df253187477&units=metric'\r\n    }\r\n};","import { CurrentWeatherModel, ForecastModel } from \"./views/api-model\";\r\nimport { appSettings } from './app-settings';\r\nimport { WeatherLocation } from './app.model';\r\nimport { AppDataStore } from \"./AppDataStore\";\r\n\r\nexport class ApiDataService {\r\n    \r\n    constructor(private appDataStore: AppDataStore) {}\r\n\r\n    async getCurrentForecastWeatherData(location: WeatherLocation) {\r\n        if(this.appDataStore.currentForecastWeather) return this.appDataStore.currentForecastWeather;\r\n\r\n        let url = '';\r\n        if(location.lat && location.lon) {\r\n            url = appSettings.api.currentWeatherForecastDataByCoordUrl.replace('{lat}', location.lat.toString()).replace('{lon}', location.lon.toString());\r\n        }\r\n        else {\r\n            throw new Error('Location not defined');\r\n        }\r\n        url = url.replace('{appid}', appSettings.appid);\r\n        let response = await fetch(url);\r\n        if(response.ok) {\r\n            const model = (await response.json()) as ForecastModel;\r\n            this.appDataStore.currentForecastWeather = model;\r\n            this.appDataStore.currentForecastWeather$.next(model);\r\n            return model;\r\n        } else {\r\n            throw new Error('error while invoking current weather data');\r\n        }\r\n    }\r\n\r\n    async getCurrentWeatherData(location: WeatherLocation) {\r\n        if(this.appDataStore.currentWeather) return this.appDataStore.currentWeather;\r\n\r\n        let url = '';\r\n        if(location.city) {\r\n            url = appSettings.api.currentWeatherDataByCityUrl.replace('{location}', location.city)\r\n        }\r\n        else if(location.lat && location.lon) {\r\n            url = appSettings.api.currentWeatherDataByCoordUrl.replace('{lat}', location.lat.toString()).replace('{lon}', location.lon.toString());\r\n        }\r\n        else {\r\n            throw new Error('Location not defined');\r\n        }\r\n        url = url.replace('{appid}', appSettings.appid);\r\n        let response = await fetch(url);\r\n        if(response.ok) {\r\n            const model = (await response.json()) as CurrentWeatherModel;\r\n            this.appDataStore.currentWeather = model;\r\n            this.appDataStore.currentWeather$.next(model);\r\n            return model;\r\n        } else {\r\n            throw new Error('error while invoking current weather data');\r\n        }\r\n    }\r\n\r\n}","import { ApiDataService } from \"./ApiDataService\";\r\nimport React from \"react\";\r\nimport { AppDataStore } from \"./AppDataStore\";\r\n\r\nexport const appDataStore = new AppDataStore();\r\nexport const apiDataService = new ApiDataService(appDataStore);\r\nexport const ApiDataContext = React.createContext(apiDataService);\r\nexport const AppDataStoreContext = React.createContext(appDataStore);","import * as Rx from 'rxjs';\r\nimport { CurrentWeatherModel, ForecastModel } from './views/api-model';\r\nimport { WeatherLocation } from './app.model';\r\n\r\n// @todo manage the central storage more efficently\r\n// consider redux ?\r\nexport class AppDataStore {\r\n\r\n    currentWeather: CurrentWeatherModel = null as any;\r\n    currentForecastWeather: ForecastModel = null as any;\r\n    currentLocation: WeatherLocation = {};\r\n    currentWeather$: Rx.Subject<CurrentWeatherModel> = new Rx.Subject();\r\n    currentForecastWeather$: Rx.Subject<ForecastModel> = new Rx.Subject();\r\n\r\n    destroy() {\r\n        this.currentWeather$.unsubscribe();\r\n    }\r\n}","import React, { useState, useContext, useEffect } from 'react';\r\nimport './App.scss';\r\nimport Home from './views/home/Home';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport { ApiDataContext, AppDataStoreContext } from './Context';\r\nimport { WeatherLocation } from './app.model';\r\nimport { CurrentWeatherModel, ForecastModel } from './views/api-model';\r\nimport { AppDataStore } from './AppDataStore';\r\nimport { ApiDataService } from './ApiDataService';\r\n\r\ninterface AppViewModel {\r\n    currentLocation: WeatherLocation;\r\n    currentWeather: CurrentWeatherModel;\r\n    currentForecast: ForecastModel;\r\n}\r\nexport default function App() {\r\n\r\n    const [appViewModel, setViewModel] = useState();\r\n    const apiDataService: ApiDataService = useContext(ApiDataContext);\r\n    const currentWeather: CurrentWeatherModel = appViewModel ? appViewModel.currentWeather : null;\r\n    const currentForecastWeather: ForecastModel = appViewModel ? appViewModel.currentForecast : null;\r\n\r\n    if (navigator.geolocation && !appViewModel) {\r\n        navigator.geolocation.getCurrentPosition(position => {\r\n            const newAppViewModel: AppViewModel = {} as any;\r\n            newAppViewModel.currentLocation = { lat: position.coords.latitude, lon: position.coords.longitude, city: '' };\r\n            apiDataService.getCurrentWeatherData(newAppViewModel.currentLocation).then(model => {\r\n                newAppViewModel.currentWeather = model;\r\n                apiDataService.getCurrentForecastWeatherData(newAppViewModel.currentLocation).then(forecast => {\r\n                    newAppViewModel.currentForecast = forecast;\r\n                    setViewModel(newAppViewModel);\r\n                });\r\n            });\r\n        });\r\n    } else {\r\n        // geo location not enabled, alert user\r\n    }\r\n\r\n    const appHeader: JSX.Element = (\r\n        <AppBar position=\"static\">\r\n            <Toolbar>\r\n                <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                    <i className=\"material-icons\">menu</i>\r\n                </IconButton>\r\n                <AppTitle></AppTitle>\r\n                <div>\r\n                    <RadioGroup aria-label=\"position\" name=\"position\" row value=\"m\">\r\n                        <FormControlLabel\r\n                            value=\"m\"\r\n                            control={<Radio />}\r\n                            label=\"Metric\"\r\n                            labelPlacement=\"start\"\r\n                        />\r\n                    </RadioGroup>\r\n                </div>\r\n            </Toolbar>\r\n        </AppBar>\r\n    );\r\n\r\n    return (\r\n        <div className=\"root-container\">\r\n            {appHeader}\r\n            <div>\r\n                <Home currentWeather={currentWeather} forecast={currentForecastWeather}></Home>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nfunction AppTitle() {\r\n    const [currentWeather, setCurrentWeather] = useState();\r\n    const appDataStore: AppDataStore = useContext(AppDataStoreContext);\r\n    let dataAsOn = new Date(1);\r\n    if(currentWeather) {\r\n        dataAsOn.setUTCSeconds((currentWeather as CurrentWeatherModel).dt);\r\n    }\r\n    useEffect(() => {\r\n        const subscription = appDataStore.currentWeather$.subscribe((model) => {\r\n            setCurrentWeather(model);\r\n        });\r\n        return () => {\r\n            subscription.unsubscribe();\r\n        };\r\n    });\r\n\r\n    return (\r\n        <div className=\"app-title\">\r\n            <h1>{currentWeather ? (currentWeather as CurrentWeatherModel).name : ''}</h1>\r\n            <p>{currentWeather ? `data as on ${dataAsOn}` : ''}</p>\r\n        </div>\r\n    );\r\n}","import ReactDOM from 'react-dom';\r\nimport React from 'react';\r\nimport App from './App';\r\nimport './sass/main.scss';\r\nimport { ApiDataContext, AppDataStoreContext, apiDataService, appDataStore } from './Context';\r\n\r\nReactDOM.render(\r\n    (\r\n        <ApiDataContext.Provider value={apiDataService}>\r\n            <AppDataStoreContext.Provider value={appDataStore}>\r\n                <App />\r\n            </AppDataStoreContext.Provider>\r\n        </ApiDataContext.Provider>\r\n    ),\r\n    document.getElementById('app-root'));"],"sourceRoot":""}